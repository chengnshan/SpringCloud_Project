    Hystrix是一个用于分布式系统的延迟和容错的开源库。在分布式系统里，许多依赖不可避免的调用失败，比如超时、异常等，Hystrix能够保证在
一个依赖出问题的情况下，不会导致整个服务失败，避免级联故障，以提高分布式系统的弹性。

服务雪崩:
    多个微服务之间调用的时候，假设微服务A调用微服务B和微服务C，微服务B和微服务C有调用其他的微服务，这就是所谓的”扇出”，如扇出的链路上某
个微服务的调用响应式过长或者不可用，对微服务A的调用就会占用越来越多的系统资源，进而引起系统雪崩，所谓的”雪崩效应”。

断路器：
    “断路器”本身是一种开关装置，当某个服务单元发生故障监控(类似熔断保险丝)，向调用方法返回一个符合预期的、可处理的备选响应(FallBack)，
而不是长时间的等待或者抛出调用方法无法处理的异常，这样就保证了服务调用方的线程不会被长时间、不必要地占用，从而避免了故障在分布式系统中的蔓延。乃至雪崩。

服务熔断：
    熔断机制是应对雪崩效应的一种微服务链路保护机制，当扇出链路的某个微服务不可用或者响应时间太长时，会进行服务的降级，进而熔断该节点微服务
的调用，快速返回”错误”的响应信息。当检测到该节点微服务响应正常后恢复调用链路，在SpringCloud框架机制通过Hystrix实现，Hystrix会监控微服
务见调用的状况，当失败的调用到一个阈值，缺省是5秒内20次调用失败就会启动熔断机制，熔断机制的注解是@HystrixCommand。

Hystrix能做什么
    在通过第三方客户端访问（通常是通过网络）依赖服务出现高延迟或者失败时，为系统提供保护和控制。
    在分布式系统中防止级联失败。
    快速失败（Fail fast）同时能快速恢复。
    提供失败回退（Fallback）和优雅的服务降级机制。
    提供近实时的监控、报警和运维控制手段。

Hystrix 设计原则
    1、防止单个依赖耗尽容器（例如 Tomcat）内所有用户线程
    2、降低系统负载，对无法及时处理的请求快速失败（fail fast）而不是排队
    3、提供失败回退，以在必要时让失效对用户透明化
    4、使用隔离机制（例如『舱壁』/『泳道』模式，熔断器模式等）降低依赖服务对整个系统的影响
    5、针对系统服务的度量、监控和报警，提供优化以满足近实时性的要求
    6、在 Hystrix 绝大部分需要动态调整配置并快速部署到所有应用方面，提供优化以满足快速恢复的要求
    7、能保护应用不受依赖服务的整个执行过程中失败的影响，而不仅仅是网络请求

Hystrix容错机制：
    1、包裹请求：使用HystrixCommand包裹对依赖的调用逻辑，每个命令在独立线程中执行，这是用到了设计模式“命令模式”。
    2、跳闸机制：当某服务的错误率超过一定阈值时，Hystrix可以自动或手动跳闸，停止请求该服务一段时间。
    3、资源隔离：Hystrix为每个依赖都维护了一个小型的线程池，如果该线程池已满，发往该依赖的请求就被立即拒绝，而不是排队等候，从而加速判定失败。
    4、监控：Hystrix可以近乎实时的监控运行指标和配置的变化。如成功、失败、超时、被拒绝的请求等。
    5、回退机制：当请求失败、超时、被拒绝，或当断路器打开时，执行回退逻辑。回退逻辑可自定义。
    6、自我修复：断路器打开一段时间后，会自动进入半开状态，断路器打开、关闭、半开的逻辑转换。

Hystrix线程隔离策略与传播上下文：
    THREAD：线程隔离，HystrixCommand将会在单独的线程上执行，并发请求受线程池中的线程数量的限制。
    SEMAPHORE：信号量隔离，HystrixCommand将会在调用线程上执行，开销相对较小，并发请求受到信号量个数的限制。


Hystrix可以配置属性的有以下类型:
    Execution：控制HystrixCommand.run() 的如何执行
    Fallback: 控制HystrixCommand.getFallback() 如何执行
    Circuit Breaker： 控制断路器的行为
    Metrics: 捕获和HystrixCommand 和 HystrixObservableCommand 执行信息相关的配置属性
    Request Context：设置请求上下文的属性
    Collapser Properties：设置请求合并的属性
    Thread Pool Properties：设置线程池的属性

Hystrix参数的覆盖优先级:
    每个Hystrix参数都有4个地方可以配置，优先级从低到高如下，如果每个地方都配置相同的属性，则优先级高的值会覆盖优先级低的值:
        1 内置全局默认值：写死在代码里的值
        2 动态全局默认属性：通过属性文件配置全局的值
        3 内置实例默认值：写死在代码里的实例的值
        4 动态配置实例属性：通过属性文件配置特定实例的值

Hystrix配置属性详解:
  Hystrix可以配置属性的有以下类型：
        Execution：控制HystrixCommand.run() 的如何执行
        Fallback: 控制HystrixCommand.getFallback() 如何执行
        Circuit Breaker： 控制断路器的行为
        Metrics: 捕获和HystrixCommand 和 HystrixObservableCommand 执行信息相关的配置属性
        Request Context：设置请求上下文的属性
        Collapser Properties：设置请求合并的属性
        Thread Pool Properties：设置线程池的属性

Hystrix 请求缓存的使用
    请求缓存是在同一请求多次访问中保证只调用一次这个服务提供者的接口，在这同一次请求第一次的结果会被缓存，保证同一请求中同样的多次访问返回
结果相同。






