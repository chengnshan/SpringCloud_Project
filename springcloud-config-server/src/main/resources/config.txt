
    Spring Cloud Config为服务端和客户端提供了分布式系统的外部化配置支持。配置服务器为各应用的所有环境提供了一个中心化的外部配置。
它实现了对服务端和客户端对Spring Environment和PropertySource抽象的映射，所以它除了适用于Spring构建的应用程序，也可以在任何其他语言
运行的应用程序中使用。作为一个应用可以通过部署管道来进行测试或者投入生产，我们可以分别为这些环境创建配置，并且在需要迁移环境的时候获取对应环境的配置来运行。

    配置服务器默认采用git来存储配置信息，这样就有助于对环境配置进行版本管理，并且可以通过git客户端工具来方便的管理和访问配置内容。当然他也
提供本地化文件系统的存储方式，下面从这两方面介绍如何使用分布式配置来存储微服务应用多环境的配置内容。



配置刷新
    在config-clinet的pom.xml中新增spring-boot-starter-actuator监控模块，其中包含了/refresh刷新API。
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>
    SpringCloud2.0以后,没有/refresh手动调用的刷新配置地址,在类上,变量上打上@RefreshScope的注解,在启动的时候,都会看到
RequestMappingHandlerMapping : Mapped "{/refresh,methods=[post]}",也就是SpringCloud暴露了一个接口 /refresh来给
我们去刷新配置,但是SpringCloud 2.0.0以后,有了改变.我们需要在bootstrap.yml里面加上需要暴露出来的地址
    management.endpoints.web.exposure.include=refresh,health,info
    现在的地址也不是/refresh了,而是/actuator/refresh。


如果有很多个服务的话，需要手动一个一个的刷新，当服务数量到一定量级时就不靠谱了，所以需要使用MQ+spring-could-bus 消息总线模式来
批量更新配置信息。还有一个附加的，就是在服务端在从配置中心获取配置信息时，如果出现了网络波动，导致项目启动时无法获取信息的话，可以使用
如下配置来规避。













