    Feign是一个声明式的伪Http客户端，它使得写Http客户端变得更简单。使用Feign，只需要创建一个接口并注解。它具有可插拔的注解特性，
可使用Feign注解和JAX-RS注解。Feign支持可插拔的编码器和解码器。Feign默认集成了Ribbon，并和Eureka结合，默认实现了负载均衡的效果。

Feign高级应用为如下几条：
    1.使用feign进行服务间的调用。
    2.feign开启Gzip压缩。
        Spring Cloud Feign支持对请求与响应的压缩，以提高通信效率，在服务消费者配置文件开启压缩支持和压缩文件的类型即可。
            #feign 请求与响应的压缩
            feign.compression.request.enabled=true
            feign.compression.response.enabled=true
            feign.compression.request.mime-types=text/xml,application/xml,application/json #用于支持的媒体类型列表
            feign.compression.request.min-request-size=2048 #用于设置请求的最小阈值，默认是2048

    3.feign开启日志。
        feign开启日志有两种方式，一种是使用配置文件，一种是使用java代码 。

    4.feign替换JDK默认的URLConnection为okhttp。
        使用okhttp，能提高qps，因为okhttp有连接池和超时时间进行调优。

    5.feign超时设置。
        # feign启用hystrix，才能熔断、降级
        feign.hystrix.enabled=true

        # hystrix的超时时间
        hystrix.command.default.execution.timeout.enabled=true
        hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds=10000

        # ribbon的超时时间
        ribbon.ReadTimeout=10000
        ribbon.ConnectTimeout=10000

    6.feign使用hystrix进行熔断、降级处理。


Hystrix “豪猪”，具有自我保护的能力。hystrix 通过如下机制来解决雪崩效应问题。
    资源隔离：包括线程池隔离和信号量隔离，限制调用分布式服务的资源使用，某一个调用的服务出现问题不会影响其他服务调用。
    降级机制：超时降级、资源不足时(线程或信号量)降级，降级后可以配合降级接口返回托底数据。
    融断：当失败率达到阀值自动触发降级(如因网络故障/超时造成的失败率高)，熔断器触发的快速失败会进行快速恢复。
    缓存：提供了请求缓存、请求合并实现。

（1）线程池隔离模式：使用一个线程池来存储当前请求，线程池对请求作处理，设置任务返回处理超时时间，堆积的请求先入线程池队列。
    这种方式要为每个依赖服务申请线程池，有一定的资源消耗，好处是可以应对突发流量（流量洪峰来临时，处理不完可将数据存储到线程池队里慢慢处理）
（2）信号量隔离模式：使用一个原子计数器（或信号量）记录当前有多少个线程在运行，请求来先判断计数器的数值，若超过设置的最大线程
    个数则丢弃该类型的新请求，若不超过则执行计数操作请求来计数器+1，请求返回计数器-1。这种方式是严格的控制线程且立即返回模式，
    无法应对突发流量（流量洪峰来临时，处理的线程超过数量，其他的请求会直接返回，不继续去请求依赖的服务）





