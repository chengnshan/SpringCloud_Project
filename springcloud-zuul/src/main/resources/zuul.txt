  Zuul的主要功能是路由转发和过滤器。路由功能是微服务的一部分，比如／api/user转发到到user服务，/api/shop转发到到shop服务。zuul默认
和Ribbon结合实现了负载均衡的功能。

Zuul能做什么？
    Zuul可以通过加载动态过滤机制，从而实现以下各项功能：
        验证与安全保障: 识别面向各类资源的验证要求并拒绝那些与要求不符的请求。
        审查与监控: 在边缘位置追踪有意义数据及统计结果，从而为我们带来准确的生产状态结论。
        动态路由: 以动态方式根据需要将请求路由至不同后端集群处。
        压力测试: 逐渐增加指向集群的负载流量，从而计算性能水平。
        负载分配: 为每一种负载类型分配对应容量，并弃用超出限定值的请求。
        静态响应处理: 在边缘位置直接建立部分响应，从而避免其流入内部集群。
        多区域弹性: 跨越AWS区域进行请求路由，旨在实现ELB使用多样化并保证边缘位置与使用者尽可能接近。

==============================================================================================================
  由于Spring Cloud Zuul包含了对Hystrix和Ribbon的依赖，所以Zuul拥有线程隔离和断路器的自我保护功能，以及对客户端的负载均衡能力。但是，
需要注意在使用path和url的映射关系来配置路由规则时,对于路由转发的请求不会采用HystrixCommand来包装，所以这类路由请求没有线程隔离和
断路器的保护以及负载均衡的能力。所以使用Zuul的时候尽量使用path和serviceId的方式配置。
  hystrix.command.default.execution.isolation.thread.timeoutMilliseconds：
        该参数用来设置API网关中路由转发请求的HystrixCommand超时时间，单位为毫秒。当路由转发请求的命令执行时间超过该配置值后，
        Hystrix会将该执行命令标记为TIMEOUT并抛出异常。
  ribbon.ConnectTimeout：
        该参数用来设置路由转发请求的时候，创建请求连接的超时时间。当ribbon.ConnectTimeout的配置值小于
        hystrix.command.default.execution.isolation.thread.timeoutMilliseconds配置值的时候，若出现路由请求连接超时，
        会自动进行重试路由请求，如果重试依然失败，Zuul会抛出异常。如果ribbon.ConnectTimeout的配置值大于
        hystrix.command.default.execution.isolation.thread.timeoutMilliseconds配置值的时候，不会进行请求重试，
        直接抛出异常。
  ribbon.ReadTimeout：
        该参数用来设置路由转发请求的超时时间。它的处理与ribbon.ConnectTimeout相似，当ribbon.ReadTimeout的配置值小于
        hystrix.command.default.execution.isolation.thread.timeoutMilliseconds配置值的时候，若出现路由请求连接超时，
        会自动进行重试路由请求，如果重试依然失败，Zuul会抛出异常。如果ribbon.ReadTimeout的配置值大于
        hystrix.command.default.execution.isolation.thread.timeoutMilliseconds配置值的时候，不会进行请求重试，
        直接抛出异常。
==============================================================================================================

  Zuul的核心是一系列的filters, 其作用可以类比Servlet框架的Filter，或者AOP。zuul把Request route到 用户处理逻辑 的过程中，
这些filter参与一些过滤处理，比如Authentication，Load Shedding等。

  Zuul的过滤器之间没有直接的相互通信，他们之间通过一个RequestContext的静态类来进行数据传递的。RequestContext类中有ThreadLocal
变量来记录每个Request所需要传递的数据。
  Zuul的过滤器是由Groovy写成，这些过滤器文件被放在Zuul Server上的特定目录下面，Zuul会定期轮询这些目录，修改过的过滤器会动态的加载到
Zuul Server中以便过滤请求使用。

Zuul大部分功能都是通过过滤器来实现的。Zuul中定义了四种标准过滤器类型，这些过滤器类型对应于请求的典型生命周期。
    (1) PRE：这种过滤器在请求被路由之前调用。我们可利用这种过滤器实现身份验证、在集群中选择请求的微服务、记录调试信息等。
    (2) ROUTING :这种过滤器用于构建发送给微服务的请求，并使用Apache HttpClient或Netfilx Ribbon请求微服务。
    (3) POST：这种过滤器在路由到微服务以后执行。这种过滤器可用来为响应添加标准的HTTP Header、收集统计信息和指标、将响应从微服务发送给客户端等。
    (4) ERROR：在其他阶段发生错误时执行该过滤器。
  内置的特殊过滤器
        zuul还提供了一类特殊的过滤器，分别为：StaticResponseFilter和SurgicalDebugFilter
        StaticResponseFilter：StaticResponseFilter允许从Zuul本身生成响应，而不是将请求转发到源。
        SurgicalDebugFilter：SurgicalDebugFilter允许将特定请求路由到分隔的调试集群或主机。

自定义的过滤器
    除了默认的过滤器类型，Zuul还允许我们创建自定义的过滤器类型。
    自定义过滤器的实现，需要继承ZuulFilter，需要重写实现下面四个方法：
    filterType：返回一个字符串代表过滤器的类型，在zuul中定义了四种不同生命周期的过滤器类型，具体如下：
        pre：可以在请求被路由之前调用
        routing：在路由请求时候被调用
        post：在routing和error过滤器之后被调用
        error：处理请求时发生错误时被调用
    filterOrder：通过int值来定义过滤器的执行顺序
    shouldFilter：返回一个boolean类型来判断该过滤器是否要执行，所以通过此函数可实现过滤器的开关。在上例中，我们直接返回true，所以该过滤器总是生效。
    run：过滤器的具体逻辑。需要注意，这里我们通过ctx.setSendZuulResponse(false)令zuul过滤该请求，不对其进行路由，然后
        通过ctx.setResponseStatusCode(401)设置了其返回的错误码，当然我们也可以进一步优化我们的返回，比如，
        通过ctx.setResponseBody(body)对返回body内容进行编辑等。
==============================================================================================================

如何在Zuul中使用fallback功能实现服务降级
    当我们的后端服务出现异常的时候，我们不希望将异常抛出给最外层，期望服务可以自动进行一降级。Zuul给我们提供了这样的支持。当某个服务出现
异常时，直接返回我们预设的信息。我们只需要实现FallbackProvider接口并重写提供的两个方法。





